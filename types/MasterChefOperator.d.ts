/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MasterChefOperatorInterface extends ethers.utils.Interface {
  functions: {
    "COMMIT_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "STAGE_ROLE()": FunctionFragment;
    "acceptTimelockAdmin()": FunctionFragment;
    "commitEmissionChange(uint256,uint256,uint8)": FunctionFragment;
    "commitFarmChanges(uint256,uint8)": FunctionFragment;
    "commitSetPendingTimelockAdmin(address,uint256,uint8)": FunctionFragment;
    "commitSetTreasuryAddress(address,uint256,uint8)": FunctionFragment;
    "farmAdditions(uint256,uint256)": FunctionFragment;
    "farmModificationEtas()": FunctionFragment;
    "farmModifications(uint256,uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "masterChef()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "stageFarmAdditions(tuple[],uint256)": FunctionFragment;
    "stageFarmModifications(tuple[],uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "timelock()": FunctionFragment;
    "usedFarmChangeEtas(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "COMMIT_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STAGE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptTimelockAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commitEmissionChange",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "commitFarmChanges",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "commitSetPendingTimelockAdmin",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "commitSetTreasuryAddress",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "farmAdditions",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "farmModificationEtas",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "farmModifications",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "masterChef",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stageFarmAdditions",
    values: [
      { lpToken: string; allocationPoints: BigNumberish; rewarder: string }[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stageFarmModifications",
    values: [
      {
        pid: BigNumberish;
        allocationPoints: BigNumberish;
        rewarder: string;
        overwriteRewarder: boolean;
      }[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "timelock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "usedFarmChangeEtas",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "COMMIT_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "STAGE_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptTimelockAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitEmissionChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitFarmChanges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitSetPendingTimelockAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitSetTreasuryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "farmAdditions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "farmModificationEtas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "farmModifications",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "masterChef", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stageFarmAdditions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stageFarmModifications",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timelock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "usedFarmChangeEtas",
    data: BytesLike
  ): Result;

  events: {
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export class MasterChefOperator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MasterChefOperatorInterface;

  functions: {
    COMMIT_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "COMMIT_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    STAGE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "STAGE_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    acceptTimelockAdmin(overrides?: Overrides): Promise<ContractTransaction>;

    "acceptTimelockAdmin()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    commitEmissionChange(
      beetsPerBlock: BigNumberish,
      eta: BigNumberish,
      txType: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "commitEmissionChange(uint256,uint256,uint8)"(
      beetsPerBlock: BigNumberish,
      eta: BigNumberish,
      txType: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    commitFarmChanges(
      eta: BigNumberish,
      txType: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "commitFarmChanges(uint256,uint8)"(
      eta: BigNumberish,
      txType: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    commitSetPendingTimelockAdmin(
      admin: string,
      eta: BigNumberish,
      txType: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "commitSetPendingTimelockAdmin(address,uint256,uint8)"(
      admin: string,
      eta: BigNumberish,
      txType: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    commitSetTreasuryAddress(
      treasury: string,
      eta: BigNumberish,
      txType: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "commitSetTreasuryAddress(address,uint256,uint8)"(
      treasury: string,
      eta: BigNumberish,
      txType: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    farmAdditions(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        lpToken: string;
        allocationPoints: BigNumber;
        rewarder: string;
      }
    >;

    "farmAdditions(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        lpToken: string;
        allocationPoints: BigNumber;
        rewarder: string;
      }
    >;

    farmModificationEtas(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    "farmModificationEtas()"(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    farmModifications(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, boolean] & {
        pid: BigNumber;
        allocationPoints: BigNumber;
        rewarder: string;
        overwriteRewarder: boolean;
      }
    >;

    "farmModifications(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, boolean] & {
        pid: BigNumber;
        allocationPoints: BigNumber;
        rewarder: string;
        overwriteRewarder: boolean;
      }
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    masterChef(overrides?: CallOverrides): Promise<[string]>;

    "masterChef()"(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stageFarmAdditions(
      farmsToAdd: {
        lpToken: string;
        allocationPoints: BigNumberish;
        rewarder: string;
      }[],
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "stageFarmAdditions(tuple[],uint256)"(
      farmsToAdd: {
        lpToken: string;
        allocationPoints: BigNumberish;
        rewarder: string;
      }[],
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stageFarmModifications(
      farmsToEdit: {
        pid: BigNumberish;
        allocationPoints: BigNumberish;
        rewarder: string;
        overwriteRewarder: boolean;
      }[],
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "stageFarmModifications(tuple[],uint256)"(
      farmsToEdit: {
        pid: BigNumberish;
        allocationPoints: BigNumberish;
        rewarder: string;
        overwriteRewarder: boolean;
      }[],
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    timelock(overrides?: CallOverrides): Promise<[string]>;

    "timelock()"(overrides?: CallOverrides): Promise<[string]>;

    usedFarmChangeEtas(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "usedFarmChangeEtas(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  COMMIT_ROLE(overrides?: CallOverrides): Promise<string>;

  "COMMIT_ROLE()"(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  STAGE_ROLE(overrides?: CallOverrides): Promise<string>;

  "STAGE_ROLE()"(overrides?: CallOverrides): Promise<string>;

  acceptTimelockAdmin(overrides?: Overrides): Promise<ContractTransaction>;

  "acceptTimelockAdmin()"(overrides?: Overrides): Promise<ContractTransaction>;

  commitEmissionChange(
    beetsPerBlock: BigNumberish,
    eta: BigNumberish,
    txType: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "commitEmissionChange(uint256,uint256,uint8)"(
    beetsPerBlock: BigNumberish,
    eta: BigNumberish,
    txType: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  commitFarmChanges(
    eta: BigNumberish,
    txType: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "commitFarmChanges(uint256,uint8)"(
    eta: BigNumberish,
    txType: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  commitSetPendingTimelockAdmin(
    admin: string,
    eta: BigNumberish,
    txType: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "commitSetPendingTimelockAdmin(address,uint256,uint8)"(
    admin: string,
    eta: BigNumberish,
    txType: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  commitSetTreasuryAddress(
    treasury: string,
    eta: BigNumberish,
    txType: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "commitSetTreasuryAddress(address,uint256,uint8)"(
    treasury: string,
    eta: BigNumberish,
    txType: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  farmAdditions(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string] & {
      lpToken: string;
      allocationPoints: BigNumber;
      rewarder: string;
    }
  >;

  "farmAdditions(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string] & {
      lpToken: string;
      allocationPoints: BigNumber;
      rewarder: string;
    }
  >;

  farmModificationEtas(overrides?: CallOverrides): Promise<BigNumber[]>;

  "farmModificationEtas()"(overrides?: CallOverrides): Promise<BigNumber[]>;

  farmModifications(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, boolean] & {
      pid: BigNumber;
      allocationPoints: BigNumber;
      rewarder: string;
      overwriteRewarder: boolean;
    }
  >;

  "farmModifications(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, boolean] & {
      pid: BigNumber;
      allocationPoints: BigNumber;
      rewarder: string;
      overwriteRewarder: boolean;
    }
  >;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  masterChef(overrides?: CallOverrides): Promise<string>;

  "masterChef()"(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stageFarmAdditions(
    farmsToAdd: {
      lpToken: string;
      allocationPoints: BigNumberish;
      rewarder: string;
    }[],
    eta: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "stageFarmAdditions(tuple[],uint256)"(
    farmsToAdd: {
      lpToken: string;
      allocationPoints: BigNumberish;
      rewarder: string;
    }[],
    eta: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stageFarmModifications(
    farmsToEdit: {
      pid: BigNumberish;
      allocationPoints: BigNumberish;
      rewarder: string;
      overwriteRewarder: boolean;
    }[],
    eta: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "stageFarmModifications(tuple[],uint256)"(
    farmsToEdit: {
      pid: BigNumberish;
      allocationPoints: BigNumberish;
      rewarder: string;
      overwriteRewarder: boolean;
    }[],
    eta: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  timelock(overrides?: CallOverrides): Promise<string>;

  "timelock()"(overrides?: CallOverrides): Promise<string>;

  usedFarmChangeEtas(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "usedFarmChangeEtas(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    COMMIT_ROLE(overrides?: CallOverrides): Promise<string>;

    "COMMIT_ROLE()"(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    STAGE_ROLE(overrides?: CallOverrides): Promise<string>;

    "STAGE_ROLE()"(overrides?: CallOverrides): Promise<string>;

    acceptTimelockAdmin(overrides?: CallOverrides): Promise<void>;

    "acceptTimelockAdmin()"(overrides?: CallOverrides): Promise<void>;

    commitEmissionChange(
      beetsPerBlock: BigNumberish,
      eta: BigNumberish,
      txType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "commitEmissionChange(uint256,uint256,uint8)"(
      beetsPerBlock: BigNumberish,
      eta: BigNumberish,
      txType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    commitFarmChanges(
      eta: BigNumberish,
      txType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "commitFarmChanges(uint256,uint8)"(
      eta: BigNumberish,
      txType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    commitSetPendingTimelockAdmin(
      admin: string,
      eta: BigNumberish,
      txType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "commitSetPendingTimelockAdmin(address,uint256,uint8)"(
      admin: string,
      eta: BigNumberish,
      txType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    commitSetTreasuryAddress(
      treasury: string,
      eta: BigNumberish,
      txType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "commitSetTreasuryAddress(address,uint256,uint8)"(
      treasury: string,
      eta: BigNumberish,
      txType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    farmAdditions(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        lpToken: string;
        allocationPoints: BigNumber;
        rewarder: string;
      }
    >;

    "farmAdditions(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string] & {
        lpToken: string;
        allocationPoints: BigNumber;
        rewarder: string;
      }
    >;

    farmModificationEtas(overrides?: CallOverrides): Promise<BigNumber[]>;

    "farmModificationEtas()"(overrides?: CallOverrides): Promise<BigNumber[]>;

    farmModifications(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, boolean] & {
        pid: BigNumber;
        allocationPoints: BigNumber;
        rewarder: string;
        overwriteRewarder: boolean;
      }
    >;

    "farmModifications(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, boolean] & {
        pid: BigNumber;
        allocationPoints: BigNumber;
        rewarder: string;
        overwriteRewarder: boolean;
      }
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    masterChef(overrides?: CallOverrides): Promise<string>;

    "masterChef()"(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stageFarmAdditions(
      farmsToAdd: {
        lpToken: string;
        allocationPoints: BigNumberish;
        rewarder: string;
      }[],
      eta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "stageFarmAdditions(tuple[],uint256)"(
      farmsToAdd: {
        lpToken: string;
        allocationPoints: BigNumberish;
        rewarder: string;
      }[],
      eta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stageFarmModifications(
      farmsToEdit: {
        pid: BigNumberish;
        allocationPoints: BigNumberish;
        rewarder: string;
        overwriteRewarder: boolean;
      }[],
      eta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "stageFarmModifications(tuple[],uint256)"(
      farmsToEdit: {
        pid: BigNumberish;
        allocationPoints: BigNumberish;
        rewarder: string;
        overwriteRewarder: boolean;
      }[],
      eta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    timelock(overrides?: CallOverrides): Promise<string>;

    "timelock()"(overrides?: CallOverrides): Promise<string>;

    usedFarmChangeEtas(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "usedFarmChangeEtas(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    RoleAdminChanged(
      role: BytesLike | null,
      previousAdminRole: BytesLike | null,
      newAdminRole: BytesLike | null
    ): EventFilter;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;
  };

  estimateGas: {
    COMMIT_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "COMMIT_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    STAGE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "STAGE_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    acceptTimelockAdmin(overrides?: Overrides): Promise<BigNumber>;

    "acceptTimelockAdmin()"(overrides?: Overrides): Promise<BigNumber>;

    commitEmissionChange(
      beetsPerBlock: BigNumberish,
      eta: BigNumberish,
      txType: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "commitEmissionChange(uint256,uint256,uint8)"(
      beetsPerBlock: BigNumberish,
      eta: BigNumberish,
      txType: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    commitFarmChanges(
      eta: BigNumberish,
      txType: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "commitFarmChanges(uint256,uint8)"(
      eta: BigNumberish,
      txType: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    commitSetPendingTimelockAdmin(
      admin: string,
      eta: BigNumberish,
      txType: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "commitSetPendingTimelockAdmin(address,uint256,uint8)"(
      admin: string,
      eta: BigNumberish,
      txType: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    commitSetTreasuryAddress(
      treasury: string,
      eta: BigNumberish,
      txType: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "commitSetTreasuryAddress(address,uint256,uint8)"(
      treasury: string,
      eta: BigNumberish,
      txType: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    farmAdditions(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "farmAdditions(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    farmModificationEtas(overrides?: CallOverrides): Promise<BigNumber>;

    "farmModificationEtas()"(overrides?: CallOverrides): Promise<BigNumber>;

    farmModifications(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "farmModifications(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    masterChef(overrides?: CallOverrides): Promise<BigNumber>;

    "masterChef()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stageFarmAdditions(
      farmsToAdd: {
        lpToken: string;
        allocationPoints: BigNumberish;
        rewarder: string;
      }[],
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "stageFarmAdditions(tuple[],uint256)"(
      farmsToAdd: {
        lpToken: string;
        allocationPoints: BigNumberish;
        rewarder: string;
      }[],
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stageFarmModifications(
      farmsToEdit: {
        pid: BigNumberish;
        allocationPoints: BigNumberish;
        rewarder: string;
        overwriteRewarder: boolean;
      }[],
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "stageFarmModifications(tuple[],uint256)"(
      farmsToEdit: {
        pid: BigNumberish;
        allocationPoints: BigNumberish;
        rewarder: string;
        overwriteRewarder: boolean;
      }[],
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timelock(overrides?: CallOverrides): Promise<BigNumber>;

    "timelock()"(overrides?: CallOverrides): Promise<BigNumber>;

    usedFarmChangeEtas(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "usedFarmChangeEtas(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    COMMIT_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "COMMIT_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    STAGE_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "STAGE_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptTimelockAdmin(overrides?: Overrides): Promise<PopulatedTransaction>;

    "acceptTimelockAdmin()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    commitEmissionChange(
      beetsPerBlock: BigNumberish,
      eta: BigNumberish,
      txType: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "commitEmissionChange(uint256,uint256,uint8)"(
      beetsPerBlock: BigNumberish,
      eta: BigNumberish,
      txType: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    commitFarmChanges(
      eta: BigNumberish,
      txType: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "commitFarmChanges(uint256,uint8)"(
      eta: BigNumberish,
      txType: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    commitSetPendingTimelockAdmin(
      admin: string,
      eta: BigNumberish,
      txType: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "commitSetPendingTimelockAdmin(address,uint256,uint8)"(
      admin: string,
      eta: BigNumberish,
      txType: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    commitSetTreasuryAddress(
      treasury: string,
      eta: BigNumberish,
      txType: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "commitSetTreasuryAddress(address,uint256,uint8)"(
      treasury: string,
      eta: BigNumberish,
      txType: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    farmAdditions(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "farmAdditions(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    farmModificationEtas(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "farmModificationEtas()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    farmModifications(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "farmModifications(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    masterChef(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "masterChef()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stageFarmAdditions(
      farmsToAdd: {
        lpToken: string;
        allocationPoints: BigNumberish;
        rewarder: string;
      }[],
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "stageFarmAdditions(tuple[],uint256)"(
      farmsToAdd: {
        lpToken: string;
        allocationPoints: BigNumberish;
        rewarder: string;
      }[],
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stageFarmModifications(
      farmsToEdit: {
        pid: BigNumberish;
        allocationPoints: BigNumberish;
        rewarder: string;
        overwriteRewarder: boolean;
      }[],
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "stageFarmModifications(tuple[],uint256)"(
      farmsToEdit: {
        pid: BigNumberish;
        allocationPoints: BigNumberish;
        rewarder: string;
        overwriteRewarder: boolean;
      }[],
      eta: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timelock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "timelock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usedFarmChangeEtas(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "usedFarmChangeEtas(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
