/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface FBeetsLockerInterface extends ethers.utils.Interface {
  functions: {
    "addReward(address,address)": FunctionFragment;
    "approveRewardDistributor(address,address,bool)": FunctionFragment;
    "balanceAtEpochOf(uint256,address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balances(address)": FunctionFragment;
    "checkpointEpoch()": FunctionFragment;
    "claimableRewards(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "denominator()": FunctionFragment;
    "epochCount()": FunctionFragment;
    "epochDuration()": FunctionFragment;
    "epochs(uint256)": FunctionFragment;
    "findEpochId(uint256)": FunctionFragment;
    "getReward(address)": FunctionFragment;
    "isShutdown()": FunctionFragment;
    "kickExpiredLocks(address)": FunctionFragment;
    "kickRewardEpochDelay()": FunctionFragment;
    "kickRewardPerEpoch()": FunctionFragment;
    "lastTimeRewardApplicable(address)": FunctionFragment;
    "lock(address,uint256)": FunctionFragment;
    "lockDuration()": FunctionFragment;
    "lockedBalanceOf(address)": FunctionFragment;
    "lockedBalances(address)": FunctionFragment;
    "lockingToken()": FunctionFragment;
    "name()": FunctionFragment;
    "notifyRewardAmount(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "processExpiredLocks(bool,address)": FunctionFragment;
    "recoverERC20(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardData(address)": FunctionFragment;
    "rewardDistributors(address,address)": FunctionFragment;
    "rewardPerToken(address)": FunctionFragment;
    "rewardTokens(uint256)": FunctionFragment;
    "rewards(address,address)": FunctionFragment;
    "setKickIncentive(uint256,uint256)": FunctionFragment;
    "shutdown()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalLockedSupply()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalSupplyAtEpoch(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userLocks(address,uint256)": FunctionFragment;
    "userRewardPerTokenPaid(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addReward",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approveRewardDistributor",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceAtEpochOf",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "balances", values: [string]): string;
  encodeFunctionData(
    functionFragment: "checkpointEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimableRewards",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "denominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "findEpochId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getReward", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isShutdown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "kickExpiredLocks",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "kickRewardEpochDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "kickRewardPerEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastTimeRewardApplicable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lock",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockedBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedBalances",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockingToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "notifyRewardAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "processExpiredLocks",
    values: [boolean, string]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rewardData", values: [string]): string;
  encodeFunctionData(
    functionFragment: "rewardDistributors",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewards",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setKickIncentive",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "shutdown", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalLockedSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAtEpoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userLocks",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userRewardPerTokenPaid",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "addReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveRewardDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceAtEpochOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkpointEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "denominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epochCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "epochDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epochs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "findEpochId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isShutdown", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "kickExpiredLocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "kickRewardEpochDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "kickRewardPerEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastTimeRewardApplicable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "notifyRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processExpiredLocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardDistributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setKickIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shutdown", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalLockedSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAtEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userLocks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userRewardPerTokenPaid",
    data: BytesLike
  ): Result;

  events: {
    "KickReward(address,address,uint256)": EventFragment;
    "Locked(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Recovered(address,uint256)": EventFragment;
    "RewardAdded(address,uint256)": EventFragment;
    "RewardPaid(address,address,uint256)": EventFragment;
    "Withdrawn(address,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "KickReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Locked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Recovered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export class FBeetsLocker extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: FBeetsLockerInterface;

  functions: {
    addReward(
      _rewardToken: string,
      _distributor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addReward(address,address)"(
      _rewardToken: string,
      _distributor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    approveRewardDistributor(
      _rewardToken: string,
      _distributor: string,
      _approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approveRewardDistributor(address,address,bool)"(
      _rewardToken: string,
      _distributor: string,
      _approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceAtEpochOf(
      _epoch: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    "balanceAtEpochOf(uint256,address)"(
      _epoch: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    balanceOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    "balanceOf(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        lockedAmount: BigNumber;
        nextUnlockIndex: BigNumber;
      }
    >;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        lockedAmount: BigNumber;
        nextUnlockIndex: BigNumber;
      }
    >;

    checkpointEpoch(overrides?: Overrides): Promise<ContractTransaction>;

    "checkpointEpoch()"(overrides?: Overrides): Promise<ContractTransaction>;

    claimableRewards(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [([string, BigNumber] & { token: string; amount: BigNumber })[]] & {
        userRewards: ([string, BigNumber] & {
          token: string;
          amount: BigNumber;
        })[];
      }
    >;

    "claimableRewards(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [([string, BigNumber] & { token: string; amount: BigNumber })[]] & {
        userRewards: ([string, BigNumber] & {
          token: string;
          amount: BigNumber;
        })[];
      }
    >;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "decimals()"(overrides?: CallOverrides): Promise<[number]>;

    denominator(overrides?: CallOverrides): Promise<[BigNumber]>;

    "denominator()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    epochCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "epochCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    epochDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    "epochDuration()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    epochs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { supply: BigNumber; startTime: BigNumber }
    >;

    "epochs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { supply: BigNumber; startTime: BigNumber }
    >;

    findEpochId(
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { epoch: BigNumber }>;

    "findEpochId(uint256)"(
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { epoch: BigNumber }>;

    getReward(
      _user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getReward(address)"(
      _user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isShutdown(overrides?: CallOverrides): Promise<[boolean]>;

    "isShutdown()"(overrides?: CallOverrides): Promise<[boolean]>;

    kickExpiredLocks(
      _user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "kickExpiredLocks(address)"(
      _user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    kickRewardEpochDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    "kickRewardEpochDelay()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    kickRewardPerEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    "kickRewardPerEpoch()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastTimeRewardApplicable(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "lastTimeRewardApplicable(address)"(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lock(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "lock(address,uint256)"(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lockDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lockDuration()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockedBalanceOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    "lockedBalanceOf(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    lockedBalances(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        ([BigNumber, BigNumber] & {
          locked: BigNumber;
          unlockTime: BigNumber;
        })[]
      ] & {
        total: BigNumber;
        unlockable: BigNumber;
        locked: BigNumber;
        lockData: ([BigNumber, BigNumber] & {
          locked: BigNumber;
          unlockTime: BigNumber;
        })[];
      }
    >;

    "lockedBalances(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        ([BigNumber, BigNumber] & {
          locked: BigNumber;
          unlockTime: BigNumber;
        })[]
      ] & {
        total: BigNumber;
        unlockable: BigNumber;
        locked: BigNumber;
        lockData: ([BigNumber, BigNumber] & {
          locked: BigNumber;
          unlockTime: BigNumber;
        })[];
      }
    >;

    lockingToken(overrides?: CallOverrides): Promise<[string]>;

    "lockingToken()"(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    notifyRewardAmount(
      _rewardToken: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "notifyRewardAmount(address,uint256)"(
      _rewardToken: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    processExpiredLocks(
      _relock: boolean,
      _withdrawTo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "processExpiredLocks(bool,address)"(
      _relock: boolean,
      _withdrawTo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    recoverERC20(
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "recoverERC20(address,uint256)"(
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    rewardData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        periodFinish: BigNumber;
        rewardRate: BigNumber;
        lastUpdateTime: BigNumber;
        rewardPerTokenStored: BigNumber;
      }
    >;

    "rewardData(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        periodFinish: BigNumber;
        rewardRate: BigNumber;
        lastUpdateTime: BigNumber;
        rewardPerTokenStored: BigNumber;
      }
    >;

    rewardDistributors(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "rewardDistributors(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    rewardPerToken(
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "rewardPerToken(address)"(
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "rewardTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rewards(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "rewards(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setKickIncentive(
      _kickRewardPerEpoch: BigNumberish,
      _kickRewardEpochDelay: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setKickIncentive(uint256,uint256)"(
      _kickRewardPerEpoch: BigNumberish,
      _kickRewardEpochDelay: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    shutdown(overrides?: Overrides): Promise<ContractTransaction>;

    "shutdown()"(overrides?: Overrides): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    totalLockedSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalLockedSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { supply: BigNumber }>;

    "totalSupply()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { supply: BigNumber }>;

    totalSupplyAtEpoch(
      _epochIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { supply: BigNumber }>;

    "totalSupplyAtEpoch(uint256)"(
      _epochIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { supply: BigNumber }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userLocks(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { locked: BigNumber; unlockTime: BigNumber }
    >;

    "userLocks(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { locked: BigNumber; unlockTime: BigNumber }
    >;

    userRewardPerTokenPaid(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "userRewardPerTokenPaid(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  addReward(
    _rewardToken: string,
    _distributor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addReward(address,address)"(
    _rewardToken: string,
    _distributor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  approveRewardDistributor(
    _rewardToken: string,
    _distributor: string,
    _approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approveRewardDistributor(address,address,bool)"(
    _rewardToken: string,
    _distributor: string,
    _approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceAtEpochOf(
    _epoch: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceAtEpochOf(uint256,address)"(
    _epoch: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balances(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      lockedAmount: BigNumber;
      nextUnlockIndex: BigNumber;
    }
  >;

  "balances(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      lockedAmount: BigNumber;
      nextUnlockIndex: BigNumber;
    }
  >;

  checkpointEpoch(overrides?: Overrides): Promise<ContractTransaction>;

  "checkpointEpoch()"(overrides?: Overrides): Promise<ContractTransaction>;

  claimableRewards(
    _user: string,
    overrides?: CallOverrides
  ): Promise<([string, BigNumber] & { token: string; amount: BigNumber })[]>;

  "claimableRewards(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<([string, BigNumber] & { token: string; amount: BigNumber })[]>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  denominator(overrides?: CallOverrides): Promise<BigNumber>;

  "denominator()"(overrides?: CallOverrides): Promise<BigNumber>;

  epochCount(overrides?: CallOverrides): Promise<BigNumber>;

  "epochCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  epochDuration(overrides?: CallOverrides): Promise<BigNumber>;

  "epochDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

  epochs(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { supply: BigNumber; startTime: BigNumber }
  >;

  "epochs(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { supply: BigNumber; startTime: BigNumber }
  >;

  findEpochId(
    _time: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "findEpochId(uint256)"(
    _time: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReward(_user: string, overrides?: Overrides): Promise<ContractTransaction>;

  "getReward(address)"(
    _user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isShutdown(overrides?: CallOverrides): Promise<boolean>;

  "isShutdown()"(overrides?: CallOverrides): Promise<boolean>;

  kickExpiredLocks(
    _user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "kickExpiredLocks(address)"(
    _user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  kickRewardEpochDelay(overrides?: CallOverrides): Promise<BigNumber>;

  "kickRewardEpochDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

  kickRewardPerEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  "kickRewardPerEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

  lastTimeRewardApplicable(
    _rewardsToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "lastTimeRewardApplicable(address)"(
    _rewardsToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lock(
    _user: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "lock(address,uint256)"(
    _user: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lockDuration(overrides?: CallOverrides): Promise<BigNumber>;

  "lockDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

  lockedBalanceOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  "lockedBalanceOf(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lockedBalances(
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      ([BigNumber, BigNumber] & { locked: BigNumber; unlockTime: BigNumber })[]
    ] & {
      total: BigNumber;
      unlockable: BigNumber;
      locked: BigNumber;
      lockData: ([BigNumber, BigNumber] & {
        locked: BigNumber;
        unlockTime: BigNumber;
      })[];
    }
  >;

  "lockedBalances(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      ([BigNumber, BigNumber] & { locked: BigNumber; unlockTime: BigNumber })[]
    ] & {
      total: BigNumber;
      unlockable: BigNumber;
      locked: BigNumber;
      lockData: ([BigNumber, BigNumber] & {
        locked: BigNumber;
        unlockTime: BigNumber;
      })[];
    }
  >;

  lockingToken(overrides?: CallOverrides): Promise<string>;

  "lockingToken()"(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  notifyRewardAmount(
    _rewardToken: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "notifyRewardAmount(address,uint256)"(
    _rewardToken: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  processExpiredLocks(
    _relock: boolean,
    _withdrawTo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "processExpiredLocks(bool,address)"(
    _relock: boolean,
    _withdrawTo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  recoverERC20(
    _tokenAddress: string,
    _tokenAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "recoverERC20(address,uint256)"(
    _tokenAddress: string,
    _tokenAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  rewardData(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      periodFinish: BigNumber;
      rewardRate: BigNumber;
      lastUpdateTime: BigNumber;
      rewardPerTokenStored: BigNumber;
    }
  >;

  "rewardData(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      periodFinish: BigNumber;
      rewardRate: BigNumber;
      lastUpdateTime: BigNumber;
      rewardPerTokenStored: BigNumber;
    }
  >;

  rewardDistributors(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "rewardDistributors(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  rewardPerToken(
    _rewardToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "rewardPerToken(address)"(
    _rewardToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "rewardTokens(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  rewards(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "rewards(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setKickIncentive(
    _kickRewardPerEpoch: BigNumberish,
    _kickRewardEpochDelay: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setKickIncentive(uint256,uint256)"(
    _kickRewardPerEpoch: BigNumberish,
    _kickRewardEpochDelay: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  shutdown(overrides?: Overrides): Promise<ContractTransaction>;

  "shutdown()"(overrides?: Overrides): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  totalLockedSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalLockedSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupplyAtEpoch(
    _epochIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalSupplyAtEpoch(uint256)"(
    _epochIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userLocks(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { locked: BigNumber; unlockTime: BigNumber }
  >;

  "userLocks(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { locked: BigNumber; unlockTime: BigNumber }
  >;

  userRewardPerTokenPaid(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userRewardPerTokenPaid(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    addReward(
      _rewardToken: string,
      _distributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addReward(address,address)"(
      _rewardToken: string,
      _distributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    approveRewardDistributor(
      _rewardToken: string,
      _distributor: string,
      _approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "approveRewardDistributor(address,address,bool)"(
      _rewardToken: string,
      _distributor: string,
      _approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceAtEpochOf(
      _epoch: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceAtEpochOf(uint256,address)"(
      _epoch: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        lockedAmount: BigNumber;
        nextUnlockIndex: BigNumber;
      }
    >;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        lockedAmount: BigNumber;
        nextUnlockIndex: BigNumber;
      }
    >;

    checkpointEpoch(overrides?: CallOverrides): Promise<void>;

    "checkpointEpoch()"(overrides?: CallOverrides): Promise<void>;

    claimableRewards(
      _user: string,
      overrides?: CallOverrides
    ): Promise<([string, BigNumber] & { token: string; amount: BigNumber })[]>;

    "claimableRewards(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<([string, BigNumber] & { token: string; amount: BigNumber })[]>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    denominator(overrides?: CallOverrides): Promise<BigNumber>;

    "denominator()"(overrides?: CallOverrides): Promise<BigNumber>;

    epochCount(overrides?: CallOverrides): Promise<BigNumber>;

    "epochCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    epochDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "epochDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    epochs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { supply: BigNumber; startTime: BigNumber }
    >;

    "epochs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { supply: BigNumber; startTime: BigNumber }
    >;

    findEpochId(
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "findEpochId(uint256)"(
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReward(_user: string, overrides?: CallOverrides): Promise<void>;

    "getReward(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isShutdown(overrides?: CallOverrides): Promise<boolean>;

    "isShutdown()"(overrides?: CallOverrides): Promise<boolean>;

    kickExpiredLocks(_user: string, overrides?: CallOverrides): Promise<void>;

    "kickExpiredLocks(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    kickRewardEpochDelay(overrides?: CallOverrides): Promise<BigNumber>;

    "kickRewardEpochDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

    kickRewardPerEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    "kickRewardPerEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastTimeRewardApplicable(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastTimeRewardApplicable(address)"(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock(
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "lock(address,uint256)"(
      _user: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "lockDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockedBalanceOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockedBalanceOf(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedBalances(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        ([BigNumber, BigNumber] & {
          locked: BigNumber;
          unlockTime: BigNumber;
        })[]
      ] & {
        total: BigNumber;
        unlockable: BigNumber;
        locked: BigNumber;
        lockData: ([BigNumber, BigNumber] & {
          locked: BigNumber;
          unlockTime: BigNumber;
        })[];
      }
    >;

    "lockedBalances(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        ([BigNumber, BigNumber] & {
          locked: BigNumber;
          unlockTime: BigNumber;
        })[]
      ] & {
        total: BigNumber;
        unlockable: BigNumber;
        locked: BigNumber;
        lockData: ([BigNumber, BigNumber] & {
          locked: BigNumber;
          unlockTime: BigNumber;
        })[];
      }
    >;

    lockingToken(overrides?: CallOverrides): Promise<string>;

    "lockingToken()"(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    notifyRewardAmount(
      _rewardToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "notifyRewardAmount(address,uint256)"(
      _rewardToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    processExpiredLocks(
      _relock: boolean,
      _withdrawTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "processExpiredLocks(bool,address)"(
      _relock: boolean,
      _withdrawTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    recoverERC20(
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "recoverERC20(address,uint256)"(
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    rewardData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        periodFinish: BigNumber;
        rewardRate: BigNumber;
        lastUpdateTime: BigNumber;
        rewardPerTokenStored: BigNumber;
      }
    >;

    "rewardData(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        periodFinish: BigNumber;
        rewardRate: BigNumber;
        lastUpdateTime: BigNumber;
        rewardPerTokenStored: BigNumber;
      }
    >;

    rewardDistributors(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "rewardDistributors(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rewardPerToken(
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardPerToken(address)"(
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "rewardTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    rewards(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewards(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setKickIncentive(
      _kickRewardPerEpoch: BigNumberish,
      _kickRewardEpochDelay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setKickIncentive(uint256,uint256)"(
      _kickRewardPerEpoch: BigNumberish,
      _kickRewardEpochDelay: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    shutdown(overrides?: CallOverrides): Promise<void>;

    "shutdown()"(overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalLockedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalLockedSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAtEpoch(
      _epochIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupplyAtEpoch(uint256)"(
      _epochIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userLocks(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { locked: BigNumber; unlockTime: BigNumber }
    >;

    "userLocks(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { locked: BigNumber; unlockTime: BigNumber }
    >;

    userRewardPerTokenPaid(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userRewardPerTokenPaid(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    KickReward(
      _user: string | null,
      _kicked: string | null,
      _reward: null
    ): EventFilter;

    Locked(_user: string | null, _lockedAmount: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Recovered(_token: null, _amount: null): EventFilter;

    RewardAdded(_token: string | null, _reward: null): EventFilter;

    RewardPaid(
      _user: string | null,
      _rewardsToken: string | null,
      _reward: null
    ): EventFilter;

    Withdrawn(
      _user: string | null,
      _amount: null,
      _relocked: null
    ): EventFilter;
  };

  estimateGas: {
    addReward(
      _rewardToken: string,
      _distributor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addReward(address,address)"(
      _rewardToken: string,
      _distributor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    approveRewardDistributor(
      _rewardToken: string,
      _distributor: string,
      _approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approveRewardDistributor(address,address,bool)"(
      _rewardToken: string,
      _distributor: string,
      _approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceAtEpochOf(
      _epoch: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceAtEpochOf(uint256,address)"(
      _epoch: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkpointEpoch(overrides?: Overrides): Promise<BigNumber>;

    "checkpointEpoch()"(overrides?: Overrides): Promise<BigNumber>;

    claimableRewards(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimableRewards(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    denominator(overrides?: CallOverrides): Promise<BigNumber>;

    "denominator()"(overrides?: CallOverrides): Promise<BigNumber>;

    epochCount(overrides?: CallOverrides): Promise<BigNumber>;

    "epochCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    epochDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "epochDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    epochs(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "epochs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    findEpochId(
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "findEpochId(uint256)"(
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReward(_user: string, overrides?: Overrides): Promise<BigNumber>;

    "getReward(address)"(
      _user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isShutdown(overrides?: CallOverrides): Promise<BigNumber>;

    "isShutdown()"(overrides?: CallOverrides): Promise<BigNumber>;

    kickExpiredLocks(_user: string, overrides?: Overrides): Promise<BigNumber>;

    "kickExpiredLocks(address)"(
      _user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    kickRewardEpochDelay(overrides?: CallOverrides): Promise<BigNumber>;

    "kickRewardEpochDelay()"(overrides?: CallOverrides): Promise<BigNumber>;

    kickRewardPerEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    "kickRewardPerEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastTimeRewardApplicable(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lastTimeRewardApplicable(address)"(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "lock(address,uint256)"(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    lockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "lockDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockedBalanceOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockedBalanceOf(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedBalances(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockedBalances(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockingToken(overrides?: CallOverrides): Promise<BigNumber>;

    "lockingToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    notifyRewardAmount(
      _rewardToken: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "notifyRewardAmount(address,uint256)"(
      _rewardToken: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    processExpiredLocks(
      _relock: boolean,
      _withdrawTo: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "processExpiredLocks(bool,address)"(
      _relock: boolean,
      _withdrawTo: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    recoverERC20(
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "recoverERC20(address,uint256)"(
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    rewardData(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "rewardData(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardDistributors(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardDistributors(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardPerToken(
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardPerToken(address)"(
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewards(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewards(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setKickIncentive(
      _kickRewardPerEpoch: BigNumberish,
      _kickRewardEpochDelay: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setKickIncentive(uint256,uint256)"(
      _kickRewardPerEpoch: BigNumberish,
      _kickRewardEpochDelay: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    shutdown(overrides?: Overrides): Promise<BigNumber>;

    "shutdown()"(overrides?: Overrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalLockedSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalLockedSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAtEpoch(
      _epochIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupplyAtEpoch(uint256)"(
      _epochIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    userLocks(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userLocks(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userRewardPerTokenPaid(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userRewardPerTokenPaid(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addReward(
      _rewardToken: string,
      _distributor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addReward(address,address)"(
      _rewardToken: string,
      _distributor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    approveRewardDistributor(
      _rewardToken: string,
      _distributor: string,
      _approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approveRewardDistributor(address,address,bool)"(
      _rewardToken: string,
      _distributor: string,
      _approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceAtEpochOf(
      _epoch: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceAtEpochOf(uint256,address)"(
      _epoch: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkpointEpoch(overrides?: Overrides): Promise<PopulatedTransaction>;

    "checkpointEpoch()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    claimableRewards(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimableRewards(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    denominator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "denominator()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "epochCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "epochDuration()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "epochs(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    findEpochId(
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "findEpochId(uint256)"(
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReward(
      _user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getReward(address)"(
      _user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isShutdown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isShutdown()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kickExpiredLocks(
      _user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "kickExpiredLocks(address)"(
      _user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    kickRewardEpochDelay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "kickRewardEpochDelay()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kickRewardPerEpoch(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "kickRewardPerEpoch()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastTimeRewardApplicable(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastTimeRewardApplicable(address)"(
      _rewardsToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lock(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "lock(address,uint256)"(
      _user: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lockDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lockDuration()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedBalanceOf(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lockedBalanceOf(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedBalances(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lockedBalances(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lockingToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    notifyRewardAmount(
      _rewardToken: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "notifyRewardAmount(address,uint256)"(
      _rewardToken: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processExpiredLocks(
      _relock: boolean,
      _withdrawTo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "processExpiredLocks(bool,address)"(
      _relock: boolean,
      _withdrawTo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    recoverERC20(
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "recoverERC20(address,uint256)"(
      _tokenAddress: string,
      _tokenAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    rewardData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardData(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardDistributors(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardDistributors(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardPerToken(
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardPerToken(address)"(
      _rewardToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewards(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewards(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setKickIncentive(
      _kickRewardPerEpoch: BigNumberish,
      _kickRewardEpochDelay: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setKickIncentive(uint256,uint256)"(
      _kickRewardPerEpoch: BigNumberish,
      _kickRewardEpochDelay: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    shutdown(overrides?: Overrides): Promise<PopulatedTransaction>;

    "shutdown()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalLockedSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalLockedSupply()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupplyAtEpoch(
      _epochIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalSupplyAtEpoch(uint256)"(
      _epochIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userLocks(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userLocks(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userRewardPerTokenPaid(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userRewardPerTokenPaid(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
